using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Windows.Forms;

using NPlot;
using NPlot.Windows;
using PlotSurface2D = NPlot.Windows.PlotSurface2D;

namespace SIA.UI.Controls.UserControls
{
	/// <summary>
	/// Summary description for ChartViewer.
	/// </summary>
	public class ChartViewer : System.Windows.Forms.UserControl
	{
		#region Fields member

		private NPlot.Windows.PlotSurface2D _plotSurface = null;
		private PointF _pointF = new PointF(0,0);
		private bool _bShowCoordinatesChange = false;

		#endregion Fields member

		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.Container components = null;

		public ChartViewer()
		{
			// This call is required by the Windows.Forms Form Designer.
			InitializeComponent();

			// TODO: Add any initialization after the InitializeComponent call

		}

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if(components != null)
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code
		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
			this._plotSurface = new NPlot.Windows.PlotSurface2D();
			// 
			// _plotSurface
			// 
			this._plotSurface.AutoScaleAutoGeneratedAxes = false;
			this._plotSurface.AutoScaleTitle = false;
			this._plotSurface.BackColor = System.Drawing.SystemColors.ActiveBorder;
			this._plotSurface.DateTimeToolTip = true;
			this._plotSurface.Dock = System.Windows.Forms.DockStyle.Fill;
			this._plotSurface.Legend = null;
			this._plotSurface.LegendZOrder = -1;
			this._plotSurface.Location = new System.Drawing.Point(0, 0);
			this._plotSurface.Name = "_plotSurface";
			this._plotSurface.Padding = 10;
			this._plotSurface.RightMenu = null;
			this._plotSurface.DateTimeToolTip = false;
			this._plotSurface.ShowCoordinates = true;
			this._plotSurface.Size = new System.Drawing.Size(150, 150);
			this._plotSurface.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.None;
			this._plotSurface.TabIndex = 15;
			this._plotSurface.Title = "Chart Viewer";
			this._plotSurface.TitleFont = new System.Drawing.Font("Arial", 14F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
			this._plotSurface.XAxis1 = null;
			this._plotSurface.XAxis2 = null;
			this._plotSurface.YAxis1 = null;
			this._plotSurface.YAxis2 = null;
			this._plotSurface.MouseMove += new System.Windows.Forms.MouseEventHandler(this.PlotSurface_MouseMove);
			// 
			// ChartViewer
			// 
			this.Name = "ChartViewer";
			this.Size = new System.Drawing.Size(492, 288);
			this.Controls.Add(this._plotSurface);

		}
		#endregion

		#region Properties

		public NPlot.Windows.PlotSurface2D PlotSurface
		{
			get
			{
				return _plotSurface;
			}
			set 
			{
				_plotSurface = value;
			}
		}

		public PointF MousePoint
		{
			get
			{
				return _pointF;
			}
			set
			{
				_pointF = value;
			}
		}

		#endregion

		#region Internal Helpers

		public void InitPlotSurface()
		{
			// Clear Screen
			_plotSurface.Clear();

			// Draw a fine grid. 
			Grid fineGrid = new Grid();			
			fineGrid.VerticalGridType = Grid.GridType.Fine;
			fineGrid.HorizontalGridType = Grid.GridType.Fine;
			fineGrid.MajorGridPen.Color = Color.Green;
			fineGrid.MinorGridPen.Color = Color.DarkGreen;
			_plotSurface.Add( fineGrid );
			_plotSurface.PlotBackColor = Color.DarkGray;
		}

		public void AddLinePlot(object dataSpectrumX, object dataSpectrumY, string label, Color color, float thickness)
		{
			// Linear spectrum
			LinePlot lpOriginal = null;
			try
			{
				lpOriginal = new LinePlot();
				
				lpOriginal.OrdinateData = dataSpectrumY;
				lpOriginal.AbscissaData = dataSpectrumX;
				lpOriginal.Pen = new Pen(color , thickness);
				lpOriginal.Label = label;
			
				_plotSurface.Add( lpOriginal );				
			}
			catch (System.Exception exp)
			{
				lpOriginal = null;
				throw exp;
			}			
		}

		

		public void AddHistogramPlot(object dataSpectrumX, object dataSpectrumY, bool bStyle, string label, Color color, Color[] colors, float thickness)
		{
			// Histogram plot
			HistogramPlot hisPlot = null;
			try
			{
				hisPlot = new HistogramPlot();
				// TODO: Upgrade NPlot version
				//hisPlot.HistogramPlotGreyImageStyle = bStyle;
				hisPlot.OrdinateData = dataSpectrumY;
				hisPlot.AbscissaData = dataSpectrumX;
				hisPlot.Filled = true;
				hisPlot.Pen = new Pen(color , thickness);
				hisPlot.RectangleBrush = new RectangleBrushes.HorizontalCenterFade(color, color);				
				hisPlot.BaseWidth = 0.5f;
				hisPlot.Label = label;
				
				// TODO: Upgrade NPlot version
				//// update for pseudoColor
				//if(colors != null)
				//	hisPlot.HistogramPlotGreyImageColors = colors;

				_plotSurface.Add(hisPlot);
				
				if(bStyle)
				{
					_plotSurface.XAxis1.Color = Color.Blue;
					_plotSurface.YAxis1.Color = Color.Blue;
					_plotSurface.TitleColor = Color.Blue;
				}
			}
			catch (System.Exception exp)
			{
				hisPlot = null;
				throw exp;
			}			
		}

		public void AddVertialInteraction(Color clrVertical)
		{
			PlotSurface2D.Interactions.VerticalGuideline _verticalGuideline = null;
			try
			{
				_verticalGuideline = new PlotSurface2D.Interactions.VerticalGuideline(clrVertical);
				_plotSurface.AddInteraction(_verticalGuideline);
			}
			catch (System.Exception exp)
			{
				_verticalGuideline = null;
				throw exp;
			}
		}

		public void AddHorizontalInteraction(Color clrHorizontal)
		{
			PlotSurface2D.Interactions.HorizontalGuideline _horizontalGuideline = null;
			try
			{
				_horizontalGuideline = new PlotSurface2D.Interactions.HorizontalGuideline(clrHorizontal);
				_plotSurface.AddInteraction(_horizontalGuideline);
			}
			catch (System.Exception exp)
			{
				_horizontalGuideline = null;
				throw exp;
			}
		}

		public void AddLabelsAndTitle(string labelX, string labelY, string title)
		{
			if(labelX != null && labelX.Length > 0)
				_plotSurface.XAxis1.Label = labelX;
			if(labelY != null && labelY.Length > 0)
				_plotSurface.YAxis1.Label = labelY;
			if(title != null && title.Length > 0)
				_plotSurface.Title = title;			
		}

		public void AddLegend(int numberIntemsVertically, int xOffset, int yOffset)
		{
			// add legend
			Legend l = null;
			try
			{
				l = new Legend();
				l.NumberItemsVertically = numberIntemsVertically;
				l.AttachTo(NPlot.PlotSurface2D.XAxisPosition.Bottom, NPlot.PlotSurface2D.YAxisPosition.Left);
				l.HorizontalEdgePlacement = NPlot.Legend.Placement.Outside;
				l.VerticalEdgePlacement = NPlot.Legend.Placement.Inside;
				l.XOffset = xOffset;
				l.YOffset = yOffset;
				l.BorderStyle = NPlot.LegendBase.BorderType.Line;
				_plotSurface.Legend = l;
			}
			catch (System.Exception exp)
			{
				l = null;
				throw exp;
			}
		}

		public bool ShowCoordinates
		{
			get 
			{
				if(_plotSurface == null)
					return false;
				return _plotSurface.ShowCoordinates;
			}
			set
			{
				if(_plotSurface != null)
					_plotSurface.ShowCoordinates = value;
			}
		}

		public float XCoordinate
		{
			get 
			{
				return (float)this._plotSurface.PhysicalXAxis1Cache.PhysicalToWorld(Point.Round(_pointF), true);
			}
		}

		public bool RightMenu
		{
			get
			{
				return (_plotSurface.RightMenu != null);
			}
			set
			{
				if(value == true)
				{					
					_plotSurface.RightMenu = NPlot.Windows.PlotSurface2D.DefaultContextMenu;
					_plotSurface.RightMenu.Menu.MenuItems.RemoveAt(0);
					_plotSurface.RightMenu.MenuItems.RemoveAt(0);
					_plotSurface.RightMenu.Menu.MenuItems[0].Text = "Show Coordinates";
					_plotSurface.RightMenu.Menu.MenuItems[4].Text = "Copy Chart To Clipboard";
					_plotSurface.RightMenu.Menu.Popup += new System.EventHandler(this.RightMenu__Popup);											
				}
				else
				{
					_plotSurface.RightMenu = null;
				}
			}
		}

		public void DoCommandPrint()
		{
			if(_plotSurface != null)
				_plotSurface.Print(false);
		}
		public void DoCommandPrintPreview()
		{
			if(_plotSurface != null)
				_plotSurface.Print(true);
		}

		public void DoCommandCopyChartToClipboard()
		{
			if(_plotSurface != null)
			{
				_plotSurface.CopyToClipboard();
			}
		}
		public void DoCommandCopyDataToClipboard()
		{
			if(_plotSurface != null)
			{
				_plotSurface.CopyDataToClipboard();
			}
		}

		public void PlotSurfaceRefresh()
		{
			if(_plotSurface != null)
				_plotSurface.Refresh();
		}

		#endregion Internal Helpers

		#region Events

		protected override void OnLoad(EventArgs e)
		{
			base.OnLoad (e);

			if(this.DesignMode)
				return ;

			#region Test Only
			/*
			InitPlotSurface();
			
			int nN = 100;
			double []yy = new double[100];
			double []xx = new double[100];
			for(int i=0; i<nN; i++)
			{
				xx[i] = (double)i;
				yy[i] = xx[i]*Math.Sin(xx[i]);
			}
			AddLinePlot(xx, yy, "x-y", Color.Blue, 1.0f);

			AddVertialInteraction(Color.DarkGreen);
			AddHorizontalInteraction(Color.DarkGreen);

			AddLabelsAndTitle("Intensity (bin)", "Number of pixels", "Histogram chart");

			this.ShowCoordinates = true;			

			PlotSurfaceRefresh();
			*/
			#endregion Test Only
		}

		private void PlotSurface_MouseMove(object sender, MouseEventArgs e)
		{
			if(_plotSurface.ShowCoordinates)
			{
				if(e.X != _pointF.X || e.Y != _pointF.Y)
				{
					_pointF.X = e.X;
					_pointF.Y = e.Y;
					_plotSurface.Refresh();
				}
			}
			else
			{
				if(e.X != _pointF.X || e.Y != _pointF.Y)
				{
					_pointF.X = e.X;
					_pointF.Y = e.Y;
				}
			}

			if(_bShowCoordinatesChange)
			{
				_plotSurface.Refresh();
				_bShowCoordinatesChange = false;
			}
		}

		private void RightMenu__Popup(object sender, System.EventArgs e)
		{
			_bShowCoordinatesChange = true;
		}

		#endregion

	}
}
